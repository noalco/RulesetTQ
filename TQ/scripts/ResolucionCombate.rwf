<DocumentElement xmlns="http://tempuri.org/Ruleset.xsd">
  <Scripts>
    <ScriptName>ResolucionCombate</ScriptName>
    <FolderID>33</FolderID>
    <Script>tMeles={}
tContadores={}
tResultados={}
bCCPJ=true;
nNumAtaques=0;

function onInit()
	CrearMeles();
--	FuncionactionRoll=ActionsManager.actionRoll;
	ActionsManager.actionRoll=actionRoll;
end

--	***********************************************************************
--	******************************* Ataques *******************************
--	***********************************************************************

--function ProcesarGolpeAislado(rSource, rTarget, rRoll)
--	ProcesarAtaqueConCD(rSource, rTarget, rRoll, ObtenerEsquivar(rTarget), "[Ataque CC]");
--end

--function AtaqueDistancia(rSource, rTarget, rRoll)
--	ProcesarAtaqueConCD(rSource, rTarget, rRoll, ObtenerDificultadDistancia(rSource, rTarget), "[Ataque a Distancia]");
--end

function PreAtaque(rSource, aTargeting, rRolls)
	if DB.getValue("combattracker.AtaqueMele", 0)==1 then
		local rRoll=rRolls[1];
		-- Golpe aislado: si defensor debilitado -&gt; ataque +3
		local iRoll = 0;
		if aTargeting and rSource then
			for _,vTargetGroup in ipairs(aTargeting) do
				for _,vTarget in ipairs(vTargetGroup) do
					iRoll = iRoll + 1;
					if EstaDevilitado(vTarget) then
						rRolls[iRoll] = {nBonuses = rRoll.nBonuses,
										aDice = rRoll.aDice,
										nMod = rRoll.nMod+3,
										sType = rRoll.sType,
										sDesc = rRoll.sDesc.." [Debilitado: +3]"
						};
					else
						rRolls[iRoll] = {nBonuses = rRoll.nBonuses,
										aDice = rRoll.aDice,
										nMod = rRoll.nMod,
										sType = rRoll.sType,
										sDesc = rRoll.sDesc
						};
					end
				end
			end
		end
	end
	return aTargeting;
end

function Ataque(rSource, rTarget, rRoll)
--{ s'sType' = s'charsheet', s'sCreatureNode' = s'charsheet.id-00001', s'sCTNode' = s'combattracker.list.id-00010', s'sName' = s'PJ' }
--{ s'sType' = s'npc', s'sCreatureNode' = s'combattracker.list.id-00003', s'sCTNode' = s'combattracker.list.id-00003', s'sName' = s'Asesino profesional 1' }
--{ s'nBonuses' = s'9', s'aDice' = { #1 = { s'value' = #8, s'type' = s'd10', s'result' = #8, s'mode' = s'e!' }, s'expr' = s'1d10!+9', s'total' = #17 }, s'nMod' = #0, s'sType' = s'AtaqueRollAction', s'nTotal' = #17, s'bSecret' = bFALSE, s'sDesc' = s'[Ataque] Arco 11 [Arco: 14] [Penalización por FUE: -5]' }
	if EsAtaqueCC(rSource, rRoll) then
		AtaqueCC(rSource, rTarget, rRoll);
	else
--		AtaqueDistancia(rSource, rTarget, rRoll);
		ProcesarAtaqueConCD(rSource, rTarget, rRoll, ObtenerDificultadDistancia(rSource, rTarget), "[Ataque a Distancia]");
		ProcesarMultipleTargeting(rSource, rTarget);
	end
end

function AtaqueCC(rSource, rTarget, rRoll)
	if DB.getValue("combattracker.AtaqueMele", 0)==0 then
		local rMessage = ActionsManager.createActionMessage(rSource, rRoll);
		rMessage.text = rMessage.text:gsub("%[Ataque%]", "[Ataque CC]");
		if rSource and rSource["sCTNode"] and DB.getValue(rSource["sCTNode"]..".IDMele", 0)&gt;0 and DB.getValue(rSource["sCTNode"]..".IDMele", 0)&lt;7 and DB.getValue(rSource["sCTNode"]..".Fase", 0)==2 then
			-- Ataque en melé de fase 2
			rMessage.text = "[TIRADA ENFRENTADA EN MELÉ "..DB.getValue(rSource["sCTNode"]..".IDMele", 0).." DE LA FASE 2]\n"..rMessage.text;
			Comm.deliverChatMessage(rMessage);
			AniadirAtaqueAMele(rSource["sCTNode"], DB.getValue(rSource["sCTNode"]..".IDMele", 0), rRoll);
		elseif rSource and rSource["sCTNode"] and DB.getValue(rSource["sCTNode"]..".IDMele3", 0)&gt;6 and DB.getValue(rSource["sCTNode"]..".IDMele3", 0)&lt;13 and DB.getValue(rSource["sCTNode"]..".Fase", 0)==3 then
			-- Ataque en melé de fase 3
			rMessage.text = "[TIRADA ENFRENTADA EN MELÉ "..DB.getValue(rSource["sCTNode"]..".IDMele3", 0).." DE LA FASE 3]\n"..rMessage.text;
			Comm.deliverChatMessage(rMessage);
			AniadirAtaqueAMele(rSource["sCTNode"], DB.getValue(rSource["sCTNode"]..".IDMele3", 0), rRoll);
		else
			-- No está en melé -&gt; Golpe aislado
			ProcesarAtaqueConCD(rSource, rTarget, rRoll, ObtenerEsquivar(rTarget), "[Ataque CC]");
			ProcesarMultipleTargeting(rSource, rTarget);
		end
	else
		-- Golpe aislado
--		ProcesarGolpeAislado(rSource, rTarget, rRoll, rMessage)
		ProcesarAtaqueConCD(rSource, rTarget, rRoll, ObtenerEsquivar(rTarget), "[Ataque CC]");
		ProcesarMultipleTargeting(rSource, rTarget);
	end
end

function ProcesarAtaqueConCD(rSource, rTarget, rRoll, nDificultad, sAtaque)
	if rTarget and rRoll then
		nNumAtaques=nNumAtaques+1;
		local rMessageAtaque;
		if rSource then
			rMessageAtaque = ActionsManager.createActionMessage(rSource, rRoll);
			if sAtaque then
				rMessageAtaque.text = rMessageAtaque.text:gsub("%[Ataque%]", sAtaque);
			end
		end
		local rMessageResultado = ChatManager.createBaseMessage();

		local nResultado=ActionsManager.total(rRoll)-nDificultad;
		local sNombreAtacante="";
		if rSource then sNombreAtacante=ObtenerNombre(rSource); end
		local sNombreDefensor=ObtenerNombre(rTarget);
		
		if nResultado&gt;0 then
			Debug.chat(rSource and rSource.sCTNode, rSource and rSource.sCreatureNode)
			if rSource and rSource.sCTNode then AniadirResultadoAtaque(rSource.sCTNode, rTarget.sCTNode, nResultado);
			elseif rSource and rSource.sCreatureNode then Debug.chat(rSource.sCreatureNode);AniadirResultadoAtaque(rSource.sCreatureNode, rTarget.sCTNode, nResultado);
			end
			if nResultado&gt;=10 then
				local nNumGolpesEpicos=math.floor((nResultado-5)/5);
				local sGolpeEpico;
				if nNumGolpesEpicos==1 then sGolpeEpico=" (1 Golpe Épico)";
				else sGolpeEpico=" ("..nNumGolpesEpicos.." Golpes Épicos)";
				end
				rMessageResultado.text = sNombreAtacante.." golpea críticamente a "..sNombreDefensor.." con "..nResultado.." éxitos"..sGolpeEpico;
				rMessageResultado.icon = "roll_attack_crit";
			else
				rMessageResultado.text = sNombreAtacante.." golpea a "..sNombreDefensor.." con "..nResultado.." éxitos";
				rMessageResultado.icon = "roll_attack_hit";
			end
		elseif nResultado&lt;=-5 and PosiblePifia(rRoll) then
			rMessageResultado.text = sNombreAtacante.." pifia al atacar a"..sNombreDefensor;
			rMessageResultado.icon = "roll_attack_crit_miss";
			AniadirResultadoAtaque(rSource.sCTNode, rTarget.sCTNode, -10000);
		else
			rMessageResultado.text = sNombreAtacante.." falla al atacar a"..sNombreDefensor;
			rMessageResultado.icon = "roll_attack_miss";
			AniadirResultadoAtaque(rSource.sCTNode, rTarget.sCTNode, -10000);
		end
		if rSource then Comm.deliverChatMessage(rMessageAtaque); end
		Comm.deliverChatMessage(rMessageResultado);
	elseif rRoll and rSource then
		local rMessageAtaque = ActionsManager.createActionMessage(rSource, rRoll);
		if sAtaque then
			rMessageAtaque.text = rMessageAtaque.text:gsub("%[Ataque%]", sAtaque);
		end
		Comm.deliverChatMessage(rMessageAtaque);
	end
end

function AniadirResultadoAtaque(NodoCTAtacante, NodoCTDefensor, nExitos)
	if NodoCTAtacante and NodoCTDefensor then
		if not tResultados[NodoCTAtacante] then tResultados[NodoCTAtacante]={} end;
		tResultados[NodoCTAtacante][NodoCTDefensor]=nExitos;
	end
	Debug.chat(NodoCTAtacante, NodoCTDefensor, nExitos, tResultados[NodoCTAtacante][NodoCTDefensor])
--	MostrarResultadosAtaques();
end

function MostrarResultadosAtaques()
	for NotoCTAtacante,_ in pairs(tResultados) do
		for NodoCTDefensor,_ in pairs(tResultados[NotoCTAtacante]) do
			Debug.chat(DB.getValue(NotoCTAtacante..".name", ""), DB.getValue(NodoCTDefensor..".name", ""), tResultados[NotoCTAtacante][NodoCTDefensor])
		end
	end
end

--	***********************************************************************
--	******************************** Melés ********************************
--	***********************************************************************

function CrearMeles()
	tMeles={}
	tContadores={}
	for _,nodoCT in pairs(DB.getChildren("combattracker.list")) do
		local nMele=DB.getValue(nodoCT, "IDMele", 0);
		DB.setValue(nodoCT, "PenMeleMultiEnemigos", "number", 0);
		if nMele~=0 then
			if not tMeles[nMele] then
				tMeles[nMele]={};
				tContadores[nMele]={nAtaques=0, nAliados=0, nEnemigos=0};
			end
			if DB.getValue(nodoCT, "friendfoe", "")=="foe" then
				table.insert(tMeles[nMele], {PathNodo=nodoCT.getPath(), nTirada=0, bTirada=false, bEsAliado=false, bPosiblePifia=false});
				tContadores[nMele].nEnemigos=tContadores[nMele].nEnemigos+1;
			else
				table.insert(tMeles[nMele], {PathNodo=nodoCT.getPath(), nTirada=0, bTirada=false, bEsAliado=true, bPosiblePifia=false});
				tContadores[nMele].nAliados=tContadores[nMele].nAliados+1;
			end
		end
		nMele=DB.getValue(nodoCT, "IDMele3", 0);
		if nMele~=0 then
			if not tMeles[nMele] then
				tMeles[nMele]={};
				tContadores[nMele]={nAtaques=0, nAliados=0, nEnemigos=0};
			end
			if DB.getValue(nodoCT, "friendfoe", "")=="foe" then
				table.insert(tMeles[nMele], {PathNodo=nodoCT.getPath(), nTirada=0, bTirada=false, bEsAliado=false, bPosiblePifia=false});
				tContadores[nMele].nEnemigos=tContadores[nMele].nEnemigos+1;
			else
				table.insert(tMeles[nMele], {PathNodo=nodoCT.getPath(), nTirada=0, bTirada=false, bEsAliado=true, bPosiblePifia=false});
				tContadores[nMele].nAliados=tContadores[nMele].nAliados+1;
			end
		end
	end
	CalcularPenalizadores();
--	MostrarMeles();
end

function CalcularPenalizadores()
	for nMele,_ in pairs(tMeles) do
		for i,_ in pairs(tMeles[nMele]) do
			if tMeles[nMele][i].bEsAliado and tContadores[nMele].nEnemigos&gt;1 then
				DB.setValue(tMeles[nMele][i].PathNodo..".PenMeleMultiEnemigos", "number", (tContadores[nMele].nEnemigos-1)*2);
			elseif not tMeles[nMele][i].bEsAliado and tContadores[nMele].nAliados&gt;1 then
				DB.setValue(tMeles[nMele][i].PathNodo..".PenMeleMultiEnemigos", "number", (tContadores[nMele].nAliados-1)*2);
			else
				DB.setValue(tMeles[nMele][i].PathNodo..".PenMeleMultiEnemigos", "number", 0);
			end
		end
	end
end

function AniadirAtaqueAMele(nodoCT, nMele, rRoll)
	if nMele&gt;0 then
		if not tMeles[nMele] then
			tMeles[nMele]={};
			tContadores[nMele]={nAtaques=0, nAliados=0, nEnemigos=0};
		end
		for i,_ in pairs(tMeles[nMele]) do
			if tMeles[nMele][i].PathNodo==nodoCT then
				tMeles[nMele][i].nTirada=ActionsManager.total(rRoll);
				-- Posible pifia si sale un 1 en un dado o dos unos en dos dados
				tMeles[nMele][i].bPosiblePifia=PosiblePifia(rRoll);--#rRoll.aDice==tMeles[nMele][i].nTirada-rRoll.nBonuses;
				if not tMeles[nMele][i].bTirada then
					tContadores[nMele].nAtaques=tContadores[nMele].nAtaques+1;
					tMeles[nMele][i].bTirada=true;
				end
				break;
			end
		end
		if tContadores[nMele].nAtaques==#tMeles[nMele] then ProcesarMele(nMele); end
	end
--	MostrarMeles();
end

function ModificarMele(nodoCT, nMele, nMeleAnt)
	if nodoCT and nMeleAnt and nMele and nMele&gt;0 and nMeleAnt&gt;0 then
		-- nodoCT está en una melé
		-- Eliminamos el nodo de la melé anterior. Esto modifica todos los datos de la melé anterior
		local tNodoMele=EliminarDeMele(nodoCT, nMeleAnt);
		
		if not tMeles[nMele] then
			tMeles[nMele]={};
			tContadores[nMele]={nAtaques=0, nAliados=0, nEnemigos=0};
		end

		if tNodoMele then
			if tNodoMele.bTirada then
				-- Si tiene tirada, se aplica el penalizador en función de los nuevos oponentes y se actualizan los contadores de la melé
				tContadores[nMele].nAtaques=tContadores[nMele].nAtaques+1
				if tNodoMele.bEsAliado and tContadores[nMele].nEnemigos&gt;1 then
					tNodoMele.nTirada=tNodoMele.nTirada-(tContadores[nMele].nEnemigos-1)*2;
				elseif not tNodoMele.bEsAliado and tContadores[nMele].nAliados&gt;1 then 
					tNodoMele.nTirada=tNodoMele.nTirada-(tContadores[nMele].nAliados-1)*2; 
				end
			end
			-- Actualizamos los contadores de aliados y enemigos con la nueva incorporación
			if tNodoMele.bEsAliado then
				tContadores[nMele].nAliados=tContadores[nMele].nAliados+1;
			elseif not tNodoMele.bEsAliado then
				tContadores[nMele].nEnemigos=tContadores[nMele].nEnemigos+1;
			end
			table.insert(tMeles[nMele], tNodoMele);
			
			-- Recalculamos los modificacores aplicados en las tiradas por múltiples oponentes en la melé actual
			-- Individuos de la nueva melé del bando contrario al nuevo individuo sufren un penalizador al añadirse un nuevo oponente
			if not tNodoMele.bEsAliado and tContadores[nMele].nEnemigos&gt;1 then
				for i,_ in pairs(tMeles[nMele]) do
					if tMeles[nMele][i].bEsAliado and tMeles[nMele][i].bTirada then
						tMeles[nMele][i].nTirada=tMeles[nMele][i].nTirada-2;
					end
				end
			elseif tNodoMele.bEsAliado and tContadores[nMele].nAliados&gt;1 then
				for i,_ in pairs(tMeles[nMele]) do
					if not tMeles[nMele][i].bEsAliado and tMeles[nMele][i].bTirada then
						tMeles[nMele][i].nTirada=tMeles[nMele][i].nTirada-2;
					end
				end
			end
			
			CalcularPenalizadores();
			if tContadores[nMeleAnt] and tMeles[nMeleAnt] and tContadores[nMeleAnt].nAtaques==#tMeles[nMeleAnt] then ProcesarMele(nMeleAnt); end
			if tContadores[nMele].nAtaques==#tMeles[nMele] then ProcesarMele(nMele); end
		end
	elseif nodoCT and nMele and nMele&gt;0 then
		-- nodoCT no está en una melé
		if not tMeles[nMele] then
			tMeles[nMele]={};
			tContadores[nMele]={nAtaques=0, nAliados=0, nEnemigos=0};
		end
		if DB.getValue(nodoCT..".friendfoe", "")=="foe" then
			table.insert(tMeles[nMele], {PathNodo=nodoCT, nTirada=0, bTirada=false, bEsAliado=false});
			tContadores[nMele].nEnemigos=tContadores[nMele].nEnemigos+1;
			-- Aliados de la nueva melé sufren un penalizador a añadirse un nuevo enemigo
			if tContadores[nMele].nEnemigos&gt;1 then
				for i,_ in pairs(tMeles[nMele]) do
					if tMeles[nMele][i].bEsAliado and tMeles[nMele][i].bTirada then
						tMeles[nMele][i].nTirada=tMeles[nMele][i].nTirada-2;
					end
				end
			end
		else
			table.insert(tMeles[nMele], {PathNodo=nodoCT, nTirada=0, bTirada=false, bEsAliado=true});
			tContadores[nMele].nAliados=tContadores[nMele].nAliados+1;
			-- Enemigos de la nueva melé sufren un penalizador a añadirse un nuevo aliado
			if tContadores[nMele].nAliados&gt;1 then
				for i,_ in pairs(tMeles[nMele]) do
					if not tMeles[nMele][i].bEsAliado and tMeles[nMele][i].bTirada then
						tMeles[nMele][i].nTirada=tMeles[nMele][i].nTirada-2;
					end
				end
			end
		end
		CalcularPenalizadores();
		if tContadores[nMele].nAtaques==#tMeles[nMele] then ProcesarMele(nMele); end
	end
--	MostrarMeles();
end

function EliminarDeMele(nodoCT, nMele)
	local tNodoMele;
	if tMeles[nMele] then
		for i,_ in pairs(tMeles[nMele]) do
			if tMeles[nMele][i].PathNodo==nodoCT then
				tNodoMele=table.remove(tMeles[nMele], i);
				if tNodoMele.bTirada then
					tContadores[nMele].nAtaques=tContadores[nMele].nAtaques-1;
					tNodoMele.nTirada=tNodoMele.nTirada+DB.getValue(tNodoMele.PathNodo..".PenMeleMultiEnemigos", 0);
				end
				if DB.getValue(nodoCT..".friendfoe", "")=="foe" then
					tContadores[nMele].nEnemigos=tContadores[nMele].nEnemigos-1;
				else
					tContadores[nMele].nAliados=tContadores[nMele].nAliados-1;
				end
				-- Recalculamos los modificacores aplicados en las tiradas por múltiples enemigos en la melé
				if tNodoMele.bEsAliado and tContadores[nMele].nAliados&gt;0 then
					-- Si había más de un aliado en la melé, los enemigos de la melé incrementan su tirada al irse un aliado
					for i,_ in pairs(tMeles[nMele]) do
						if not tMeles[nMele][i].bEsAliado and tMeles[nMele][i].bTirada then
							tMeles[nMele][i].nTirada=tMeles[nMele][i].nTirada+2;
						end
					end
				elseif not tNodoMele.bEsAliado and tContadores[nMele].nEnemigos&gt;0 then
					-- Si había más de un enemigo en la melé, los aliados de la melé incrementan su tirada al irse un enemigo
					for i,_ in pairs(tMeles[nMele]) do
						if tMeles[nMele][i].bEsAliado and tMeles[nMele][i].bTirada and tContadores[nMele].nEnemigos&gt;0 then
							tMeles[nMele][i].nTirada=tMeles[nMele][i].nTirada+2;
						end
					end
				end
				CalcularPenalizadores();
				if tContadores[nMele].nAtaques==#tMeles[nMele] then ProcesarMele(nMele); end			
				break;
			end
		end
	end
--	MostrarMeles();
	return tNodoMele;
end

function ProcesarMele(nMele)
	local tAliados={}
	local tEnemigos={}
	local sNombreEnemigo="";
	local nResultado=0;
	local rMessage = ChatManager.createBaseMessage();
	if tContadores[nMele].nAliados&gt;0 and tContadores[nMele].nEnemigos&gt;0 then
		if tContadores[nMele].nAliados==1 or tContadores[nMele].nEnemigos==1 then
			for i,_ in pairs(tMeles[nMele]) do
				if tMeles[nMele][i].bEsAliado then table.insert(tAliados,tMeles[nMele][i]);
				else table.insert(tEnemigos,tMeles[nMele][i]);
				end
				tMeles[nMele][i].bTirada=false;
			end
			tContadores[nMele].nAtaques=0;
			for i=1,#tAliados do
				for j=1,#tEnemigos do
					if DB.getValue(tEnemigos[j].PathNodo..".isidentified", 0)==1 then sNombreEnemigo=DB.getValue(tEnemigos[j].PathNodo..".name", "");
					else sNombreEnemigo=DB.getValue(tEnemigos[j].PathNodo..".nonid_name", "");
					end
--					local sNombreAliado=ObtenerNombre(rRegistro)
--					local sNombreEnemigo=ObtenerNombre(rRegistro)
					nResultado=tAliados[i].nTirada-tEnemigos[j].nTirada;
					if nResultado&gt;0 then
						--Debug.chat(DB.getValue(tAliados[i].PathNodo..".name", "").." golpea a "..sNombreEnemigo.." con "..nResultado.." éxitos");
						AniadirResultadoAtaque(tAliados[i].PathNodo, tEnemigos[j].PathNodo, nResultado);
						rMessage.text = DB.getValue(tAliados[i].PathNodo..".name", "").." golpea a "..sNombreEnemigo.." con "..nResultado.." éxitos";
						if nResultado&gt;=10 then
							rMessage.icon = "roll_attack_crit";
						else
							rMessage.icon = "roll_attack_hit";
						end
						if nResultado&gt;=5 and tEnemigos[j].bPosiblePifia then
							local rMessagePifia = ChatManager.createBaseMessage();
							rMessagePifia.text = sNombreEnemigo.."ha cometido una pifia frente a "..DB.getValue(tAliados[i].PathNodo..".name", "");
							rMessagePifia.icon = "roll_attack_crit_miss";
							Comm.deliverChatMessage(rMessagePifia);
						end
					elseif nResultado&lt;0 then
						--Debug.chat(sNombreEnemigo.." golpea a "..DB.getValue(tAliados[i].PathNodo..".name", "").." con "..(-1*nResultado).." éxitos");
						AniadirResultadoAtaque(tEnemigos[j].PathNodo, tAliados[i].PathNodo, -1*nResultado);
						rMessage.text = sNombreEnemigo.." golpea a "..DB.getValue(tAliados[i].PathNodo..".name", "").." con "..(-1*nResultado).." éxitos";
						if nResultado&lt;=-10 then
							rMessage.icon = "roll_attack_crit";
						else
							rMessage.icon = "roll_attack_hit";
						end
						if nResultado&lt;=-5 and tAliados[i].bPosiblePifia then
							local rMessagePifia = ChatManager.createBaseMessage();
							rMessagePifia.text = DB.getValue(tAliados[i].PathNodo..".name", "").."ha cometido una pifia frente a "..sNombreEnemigo;
							rMessagePifia.icon = "roll_attack_crit_miss";
							Comm.deliverChatMessage(rMessagePifia);
						end
					else
						--Debug.chat(DB.getValue(tAliados[i].PathNodo..".name", "").." empata con "..sNombreEnemigo);
						rMessage.text = DB.getValue(tAliados[i].PathNodo..".name", "").." empata con "..sNombreEnemigo;
						rMessage.icon = "roll_attack_miss";
					end
					Comm.deliverChatMessage(rMessage);
				end
			end
			for i=1,#tAliados do
				for j=1,#tEnemigos do
--					DB.setValue(tEnemigos[j].PathNodo..".SelectorMele", "string", "No");
--					DB.setValue(tEnemigos[j].PathNodo..".PenMeleMultiEnemigos", "number", 0);
				end
--				DB.setValue(tAliados[i].PathNodo..".SelectorMele", "string", "No");
--				DB.setValue(tAliados[i].PathNodo..".PenMeleMultiEnemigos", "number", 0);
			end
--			table.remove(tMeles, nMele);
--			table.remove(tContadores, nMele);
		else
			Debug.chat("No puede haber más de un individuo en ambos bandos de una melé");
		end
	end
end

function MostrarMeles()
	for nMele,_ in pairs(tMeles) do
		Debug.chat("********** Melé "..nMele.."**********");
		Debug.chat("Contadores: ", tContadores[nMele])
		for i,_ in pairs(tMeles[nMele]) do
			Debug.chat(i, " ---- ", tMeles[nMele][i])
		end
	end
end

function LimpiarMeles()
	tMeles={}
	tContadores={}
	tResultados={}
	for _,nodoCT in pairs(DB.getChildren("combattracker.list")) do
		DB.setValue(nodoCT, "SelectorMele", "string", "No");
		DB.setValue(nodoCT, "SelectorMele3", "string", "No");
		DB.setValue(nodoCT, ".PenMeleMultiEnemigos", "number", 0);
	end
--	MostrarMeles();
end

--	***********************************************************************
--	******************************** Daños ********************************
--	***********************************************************************

function PreDanio(rSource, aTargeting, rRolls)
	local iRoll = 0;
	local rRoll=rRolls[1];
	if aTargeting and rSource and (rSource.sCTNode or rSource.sCreatureNode) then
		for _,vTargetGroup in ipairs(aTargeting) do
			for _,vTarget in ipairs(vTargetGroup) do
				iRoll = iRoll + 1;
				if tResultados[rSource.sCTNode] and tResultados[rSource.sCTNode][vTarget.sCTNode] and tResultados[rSource.sCTNode][vTarget.sCTNode]&gt;0 then
					rRolls[iRoll] = {nBonuses = rRoll.nBonuses,
									aDice = rRoll.aDice,
									nMod = rRoll.nMod+math.min(tResultados[rSource.sCTNode][vTarget.sCTNode], 10),
									sType = rRoll.sType,
									sDesc = rRoll.sDesc.." [Éxitos ataque: "..tResultados[rSource.sCTNode][vTarget.sCTNode].." ]"
					};
					tResultados[rSource.sCTNode][vTarget.sCTNode]=0;
				elseif tResultados[rSource.sCreatureNode] and tResultados[rSource.sCreatureNode][vTarget.sCTNode] and tResultados[rSource.sCreatureNode][vTarget.sCTNode]&gt;0 then
					rRolls[iRoll] = {nBonuses = rRoll.nBonuses,
									aDice = rRoll.aDice,
									nMod = rRoll.nMod+math.min(tResultados[rSource.sCreatureNode][vTarget.sCTNode], 10),
									sType = rRoll.sType,
									sDesc = rRoll.sDesc.." [Éxitos ataque: "..tResultados[rSource.sCreatureNode][vTarget.sCTNode].." ]"
					};
					tResultados[rSource.sCreatureNode][vTarget.sCTNode]=0;
				else
					rRolls[iRoll] = rRoll;
					if rSource.sCTNode and tResultados[rSource.sCTNode] then tResultados[rSource.sCTNode][vTarget.sCTNode]=0; end
					if rSource.sCreatureNode and tResultados[rSource.sCreatureNode] then tResultados[rSource.sCTNode][vTarget.sCTNode]=0; end
				end
			end
		end
	end
	return aTargeting;
end

function Danio(rSource, rTarget, rRoll)
--	local rMessage;
	if rSource then
		local rMessage1 = ActionsManager.createActionMessage(rSource, rRoll);
		rMessage1.type="DanioRollAction";
		Comm.deliverChatMessage(rMessage1);
	end

	if rTarget then
		local nProteccion=DB.getValue(rTarget.sCTNode..".TotalProteccion", 0);
		local rMessage2 = ChatManager.createBaseMessage();
		local sNombreDefensor=ObtenerNombre(rTarget);
		rMessage2.text = "Daño ["..math.max(0, ActionsManager.total(rRoll)-nProteccion).."] -&gt; [a "..sNombreDefensor.."]";
		if nProteccion&gt;0 then rMessage2.text=rMessage2.text.." [Absorbido "..math.min(nProteccion, ActionsManager.total(rRoll)).."]"; end
		rMessage2.icon = "roll_damage";
		local PDHerida=ActionsManager.total(rRoll)-nProteccion;
		AniadirHerida(rTarget, math.max(0, PDHerida))

		local nGraveIni, nGraveFin, nLeveIni, nLeveFin, nRasgunioIni, nRasgunioFin=Principal.ObtenerRangos(DB.getValue(rTarget.sCTNode..".hp", 0));
		local TipoHerida="";
		local bHeridaMortal=false;
		local bHeridaGrabe=false;
		local bHeridaLeve=false;
		if nGraveFin~="-" and PDHerida&gt;nGraveFin then TipoHerida=" [Herida Mortal] [Muerto]"; bHeridaMortal=true;
		elseif nGraveIni~="-" and PDHerida&gt;=nGraveIni then TipoHerida=" [Herida Grave]"; bHeridaGrabe=true;
		elseif nLeveIni~="-" and PDHerida&gt;=nLeveIni then TipoHerida=" [Herida Leve]"; bHeridaLeve=true;
		elseif PDHerida&gt;0 then TipoHerida=" [Rasguño]";
		end
		
		rMessage2.text=rMessage2.text..TipoHerida;
		local bDebilitado=false;
		local bIncapacitado=false;
		if not bHeridaMortal then
			if DB.getValue(rTarget.sCTNode..".current", 1)&lt;=0 then
				rMessage2.text=rMessage2.text.." [Incapacitado]";
				bIncapacitado=true;
				if bHeridaGrabe then rMessage2.text=rMessage2.text.." [1 PD/minuto]"; end
			elseif bHeridaGrabe or bHeridaLeve then
				local nContGraves=0;
				local nContLeves=0;
				for _,NodoHerida in pairs(DB.getChildren(rTarget.sCTNode..".ListaHeridas")) do
					if DB.getValue(NodoHerida, "Tipo", "")=="G" then nContGraves=nContGraves+1;
					elseif DB.getValue(NodoHerida, "Tipo", "")=="L" then nContLeves=nContLeves+1;
					end
				end

				if bHeridaGrabe then
					if nContGraves==1 and nContLeves&lt;2 then
						rMessage2.text=rMessage2.text.." [Debilitado]";
						bDebilitado=true;
					elseif nContGraves==2 or nContGraves==1 and (nContLeves==2 or nContLeves==3) then
						rMessage2.text=rMessage2.text.." [Incapacitado]";
						bIncapacitado=true;
					end
				end
				if bHeridaLeve then
					if nContLeves==2 and nContGraves==0 then
						rMessage2.text=rMessage2.text.." [Debilitado]";
						bDebilitado=true;
					elseif nContLeves==2 and nContGraves==1 or nContLeves==4 then
						rMessage2.text=rMessage2.text.." [Incapacitado]";
						bIncapacitado=true;
					end
				end
			end
		else
			bIncapacitado=true;
		end
		Comm.deliverChatMessage(rMessage2);
		if bDebilitado then
			if rTarget.sType=="charsheet" then
				return DB.setValue(rTarget.sCreatureNode..".PuntosDeVida.Debilitado", "number", 1);
			else
				return DB.setValue(rTarget.sCreatureNode..".Debilitado", "number", 1);
			end
		end
		if bIncapacitado then
			if rTarget.sType=="charsheet" then
				return DB.setValue(rTarget.sCreatureNode..".PuntosDeVida.Incapacitado", "number", 1);
			else
				return DB.setValue(rTarget.sCreatureNode..".Incapacitado", "number", 1);
			end
		end
	end
end

function AniadirHerida(rTarget, nDanio)
--{ s'sType' = s'npc', s'sCreatureNode' = s'combattracker.list.id-00003', s'sCTNode' = s'combattracker.list.id-00003', s'sName' = s'Asesino profesional 1' }
	if rTarget and nDanio&gt;0 then
		local NuevaHerida;
		if rTarget.sType=="npc" then
			NuevaHerida=DB.createChild(DB.getChild(rTarget.sCreatureNode..".ListaHeridas"));
		else
			NuevaHerida=DB.createChild(DB.getChild(rTarget.sCreatureNode..".PuntosDeVida.ListaHeridas"));
		end
		DB.setValue(NuevaHerida, "Herida", "string", "Herida");
		DB.setValue(NuevaHerida, "PD", "number", nDanio);
		if rTarget.sType=="charsheet" then
			DB.setValue(rTarget.sCreatureNode..".PuntosDeVida.ListaHeridasModificada", "number", DB.getValue(rTarget.sCreatureNode..".PuntosDeVida.ListaHeridasModificada",0)+1);
		end
	end
end

--	***********************************************************************
--	****************************** Utilidades******************************
--	***********************************************************************

-- NOTE: tTargetGroups parameter for this function assumes a list of targeting groups
function actionRoll(rSource, tTargetGroups, rRolls)
	local bModStackUsed = false;
	ActionsManager.lockModifiers();

	for i=1,#tTargetGroups do
		if rRolls[i] then
			if ActionsManager.applyModifiersAndRoll(rSource, tTargetGroups[i], true, rRolls[i]) then
				bModStackUsed = true;
			end			
		end
	end
	
	ActionsManager.unlockModifiers(bModStackUsed);
end

function EstaDevilitado(rTarget)
	if rTarget.sType=="charsheet" then
		return DB.getValue(rTarget.sCreatureNode..".PuntosDeVida.Debilitado", 0)==1;
	else
		return DB.getValue(rTarget.sCreatureNode..".Debilitado", 0)==1;
	end
end

function ObtenerEsquivar(rTarget)
	if rTarget then
		if rTarget.sType=="charsheet" then
			for _,NodoHabilidad in pairs(DB.getChildren(rTarget.sCreatureNode..".Habilidades.ListaHabilidades")) do
				if DB.getValue(NodoHabilidad, "Clave", "")=="Esquivar" then
					return DB.getValue(NodoHabilidad, "Total", 0);
				end
			end
		else
			local sHabilidades=DB.getValue(rTarget.sCTNode..".Habilidades", "");
			if sHabilidades~="" then
				local nEsquivar=sHabilidades:lower():match("esquivar (%d*)");
				if nEsquivar then return nEsquivar; end
			end
			-- O no hay habilidades o esquivar no está presente -&gt; 1+AGI-Est.
			return 1+DB.getValue(rTarget.sCTNode..".Agilidad", 0)-DB.getValue(rTarget.sCTNode..".Estorbo", "");
		end
	else
		return 0;
	end
end

function ObtenerDistancia(rSource, rTarget)
	return nil;
end

function ObtenerDificultadDistancia(rSource, rTarget)
	local bDesprevenido=DB.getValue("combattracker.AtaqueADistancia", 0)==1;
	local CDDistancia=10;
	local nDistancia=ObtenerDistancia(rSource, rTarget);
	if nDistancia then
		if nDistancia&gt;=0 and nDistancia&lt;=14 then CDDistancia=10;
		elseif nDistancia&gt;=15 and nDistancia&lt;=49 then CDDistancia=15;
		elseif nDistancia&gt;=50 and nDistancia&lt;=99 then CDDistancia=20;
		else CDDistancia=25;
		end
	else
		CDDistancia=tonumber(DB.getValue("combattracker.Distanciavalue", 0))
	end
	if bDesprevenido then return CDDistancia;
	else return math.max(CDDistancia, ObtenerEsquivar(rTarget));
	end
end

function ObtenerNombre(rRegistro)
	if rRegistro.sType=="npc" then
		if DB.getValue(rRegistro.sCTNode..".isidentified", 0)==1 then return DB.getValue(rRegistro.sCTNode..".name", "");
		else return DB.getValue(rRegistro.sCTNode..".nonid_name", "");
		end
	else
		return DB.getValue(rRegistro.sCreatureNode..".name", "");
	end
end

function PosiblePifia(rRoll)
	for i=1,#rRoll.aDice do
		if rRoll.aDice[i].value~=1 then return false; end
	end
	return true
end

function EsAtaqueCC(rSource, rRoll)
	if rSource and rRoll then
		if rSource.sType=="npc" then
			if rRoll.sDesc and rRoll.sDesc~="" then
				if rRoll.sDesc:lower():match("arco") or rRoll.sDesc:lower():match("ballesta") or rRoll.sDesc:lower():match("cañón") or rRoll.sDesc:lower():match("honda") then
					return false;
				else
					return true;
				end;
			else
				return true;
			end
		else
			return bCCPJ;
		end
	elseif rRoll and rRoll.sDesc then
		if rRoll.sDesc:match("%[Ataque CC%]") then return true;
		else return false;
		end
	end
end

function ProcesarMultipleTargeting(rSource, rTarget)
	if rSource and rTarget and rSource.sCTNode then
		if (nNumAtaques==DB.getChildCount(rSource.sCTNode..".targets")) and nNumAtaques&gt;1 then
			local ListaABorrar={};
			local sTargetCTNode="";
			nNumAtaques=0;
			for _,NodoTarget in pairs(DB.getChildren(rSource.sCTNode..".targets")) do
				sTargetCTNode=DB.getValue(NodoTarget, "noderef", "");
				if tResultados[rSource.sCTNode] and tResultados[rSource.sCTNode][sTargetCTNode] and tResultados[rSource.sCTNode][sTargetCTNode]==-10000 then
					tResultados[rSource.sCTNode][sTargetCTNode]=0;
					table.insert(ListaABorrar, sTargetCTNode);
				end
			end
			for _,sTargetCTNode in pairs(ListaABorrar) do
				TargetingManager.removeTarget(rSource.sCTNode, sTargetCTNode);
			end
		end
	end
end

function ObtenerTipoDanio(rSource)
	tArmas{
		["garra"]="Desgarradora";
		["mordisco"]="Desgarradora";
		["cuerno"]="Penetrante";
		["cola"]="Contundente";
		["tentáculo"]="Contundente";
		["pinza"]="Contundente";
		["pinzas"]="Contundente";
		["pinza_alt"]="Cortante";
		["pinzas_alt"]="Cortante";
		["pisoteo"]="Contundente";
		["alabarda"]="Cortante";
		["alabarda_alt"]="Penetrante";
		["baston de combate"]="Contundente";
		["baston"]="Contundente";
		["bisarma"]="Cortante";
		["bisarma_alt"]="Penetrante";
		["cestus"]="Contundente";
		["cestus_alt"]="Desgarradora";
		["cuchillo"]="Penetrante";
		["cuchillo_alt"]="Desgarradora";
		["daga"]="Penetrante";
		["daga_alt"]="Desgarradora";
		["escudo"]="Contundente";
		["escudo completo"]="Contundente";
		["escudo medio"]="Contundente";
		["escudo pequeño"]="Contundente";
		["escudo torre"]="Contundente";
		["escudo de torre"]="Contundente";
		["espada corta"]="Penetrante";
		["espada corta_alt"]="Cortante";
		["espada media"]="Cortante";
		["espada media_alt"]="Penetrante";
		["espada larga"]="Cortante";
		["espada larga_alt"]="Penetrante";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
		[""]="";
	};
end

















</Script>
    <RegisterScript>true</RegisterScript>
    <Encoding>UTF-8</Encoding>
  </Scripts>
</DocumentElement>