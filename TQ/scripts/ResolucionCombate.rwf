<DocumentElement xmlns="http://tempuri.org/Ruleset.xsd">
  <Scripts>
    <ScriptName>ResolucionCombate</ScriptName>
    <FolderID>33</FolderID>
    <Script>tMeles={}
tContadores={}
tResultados={}

function onInit()
	CrearMeles();
end

function Ataque(rSource, rTarget, rRoll)
--{ s'sType' = s'charsheet', s'sCreatureNode' = s'charsheet.id-00001', s'sCTNode' = s'combattracker.list.id-00010', s'sName' = s'PJ' }
--{ s'sType' = s'npc', s'sCreatureNode' = s'combattracker.list.id-00003', s'sCTNode' = s'combattracker.list.id-00003', s'sName' = s'Asesino profesional 1' }
--{ s'nBonuses' = s'9', s'aDice' = { #1 = { s'value' = #8, s'type' = s'd10', s'result' = #8, s'mode' = s'e!' }, s'expr' = s'1d10!+9', s'total' = #17 }, s'nMod' = #0, s'sType' = s'AtaqueRollAction', s'nTotal' = #17, s'bSecret' = bFALSE, s'sDesc' = s'[Ataque] Arco 11 [Arco: 14] [Penalización por FUE: -5]' }
	local rMessage = ActionsManager.createActionMessage(rSource, rRoll);
	
--	rMessage.icon = "roll_attack";
	if rSource and DB.getValue("combattracker.AtaqueMele", 0)==1 and DB.getValue(rSource["sCTNode"]..".IDMele", 0)&gt;0 and DB.getValue(rSource["sCTNode"]..".IDMele", 0)&lt;7 and DB.getValue(rSource["sCTNode"]..".Fase", 0)==2 then
		rMessage.text = "[TIRADA ENFRENTADA EN MELÉ "..DB.getValue(rSource["sCTNode"]..".IDMele", 0).." DE LA FASE 2]\n"..rMessage.text;
		Comm.deliverChatMessage(rMessage);
		AniadirAtaqueAMele(rSource["sCTNode"], DB.getValue(rSource["sCTNode"]..".IDMele", 0), ActionsManager.total(rRoll));
	elseif rSource and DB.getValue("combattracker.AtaqueMele", 0)==1 and DB.getValue(rSource["sCTNode"]..".IDMele3", 0)&gt;6 and DB.getValue(rSource["sCTNode"]..".IDMele3", 0)&lt;13 and DB.getValue(rSource["sCTNode"]..".Fase", 0)==3 then
		rMessage.text = "[TIRADA ENFRENTADA EN MELÉ "..DB.getValue(rSource["sCTNode"]..".IDMele3", 0).." DE LA FASE 3]\n"..rMessage.text;
		Comm.deliverChatMessage(rMessage);
		AniadirAtaqueAMele(rSource["sCTNode"], DB.getValue(rSource["sCTNode"]..".IDMele3", 0), ActionsManager.total(rRoll));
	else
--		rMessage.icon = "roll_attack";
		Comm.deliverChatMessage(rMessage);
	end
end

function CrearMeles()
	tMeles={}
	tContadores={}
	for _,nodoCT in pairs(DB.getChildren("combattracker.list")) do
		local nMele=DB.getValue(nodoCT, "IDMele", 0);
		DB.setValue(nodoCT, "PenMeleMultiEnemigos", "number", 0);
		if nMele~=0 then
			if not tMeles[nMele] then
				tMeles[nMele]={};
				tContadores[nMele]={nAtaques=0, nAliados=0, nEnemigos=0};
			end
			if DB.getValue(nodoCT, "friendfoe", "")=="foe" then
				table.insert(tMeles[nMele], {PathNodo=nodoCT.getPath(), nTirada=0, bTirada=false, bEsAliado=false});
				tContadores[nMele].nEnemigos=tContadores[nMele].nEnemigos+1;
			else
				table.insert(tMeles[nMele], {PathNodo=nodoCT.getPath(), nTirada=0, bTirada=false, bEsAliado=true});
				tContadores[nMele].nAliados=tContadores[nMele].nAliados+1;
			end
		end
		nMele=DB.getValue(nodoCT, "IDMele3", 0);
		if nMele~=0 then
			if not tMeles[nMele] then
				tMeles[nMele]={};
				tContadores[nMele]={nAtaques=0, nAliados=0, nEnemigos=0};
			end
			if DB.getValue(nodoCT, "friendfoe", "")=="foe" then
				table.insert(tMeles[nMele], {PathNodo=nodoCT.getPath(), nTirada=0, bTirada=false, bEsAliado=false});
				tContadores[nMele].nEnemigos=tContadores[nMele].nEnemigos+1;
			else
				table.insert(tMeles[nMele], {PathNodo=nodoCT.getPath(), nTirada=0, bTirada=false, bEsAliado=true});
				tContadores[nMele].nAliados=tContadores[nMele].nAliados+1;
			end
		end
	end
	CalcularPenalizadores();
--	MostrarMeles();
end

function CalcularPenalizadores()
	for nMele,_ in pairs(tMeles) do
		for i,_ in pairs(tMeles[nMele]) do
			if tMeles[nMele][i].bEsAliado then DB.setValue(tMeles[nMele][i].PathNodo..".PenMeleMultiEnemigos", "number", (tContadores[nMele].nEnemigos-1)*2);
			else DB.setValue(tMeles[nMele][i].PathNodo..".PenMeleMultiEnemigos", "number", (tContadores[nMele].nAliados-1)*2);
			end
		end
	end
end

function MostrarMeles()
	for nMele,_ in pairs(tMeles) do
		Debug.chat("********** Melé "..nMele.."**********");
		Debug.chat("Contadores: ", tContadores[nMele])
		for i,_ in pairs(tMeles[nMele]) do
			Debug.chat(i, " ---- ", tMeles[nMele][i])
		end
	end
end

function ModificarMele(nodoCT, nMele, nMeleAnt)
	if nodoCT and nMeleAnt and nMele and nMele&gt;0 and nMeleAnt&gt;0 then
		-- nodoCT está en una melé
		-- Eliminamos el nodo de la melé anterior. Esto modifica todos los datos de la melé anterior
		local tNodoMele=EliminarDeMele(nodoCT, nMeleAnt);
		
		if not tMeles[nMele] then
			tMeles[nMele]={};
			tContadores[nMele]={nAtaques=0, nAliados=0, nEnemigos=0};
		end

		if tNodoMele and tNodoMele.bTirada then
			-- Si tiene tirada, se aplica el penalizador en función de los nuevos oponentes y se actualizan los contadores de la melé
			tContadores[nMele].nAtaques=tContadores[nMele].nAtaques+1
			if tNodoMele.bEsAliado then
				tNodoMele.nTirada=tNodoMele.nTirada+(tContadores[nMeleAnt].nEnemigos-1)*2;
				tNodoMele.nTirada=tNodoMele.nTirada-(tContadores[nMele].nEnemigos-1)*2;
				tContadores[nMele].nAliados=tContadores[nMele].nAliados+1;
			else
				tNodoMele.nTirada=tNodoMele.nTirada+(tContadores[nMeleAnt].nAliados-1)*2;
				tNodoMele.nTirada=tNodoMele.nTirada-(tContadores[nMele].nAliados-1)*2;
				tContadores[nMele].nEnemigos=tContadores[nMele].nEnemigos+1;
			end
		end
		table.insert(tMeles[nMele], tNodoMele);
		
		-- Recalculamos los modificacores aplicados en las tiradas por múltiples oponentes en la melé actual
		-- Individuos de la nueva melé del bando contrario al nuevo individuo sufren un penalizador al añadirse un nuevo oponente
		for i,_ in pairs(tMeles[nMele]) do
			if tMeles[nMele][i].bEsAliado~=tNodoMele.bEsAliado and tMeles[nMele][i].bTirada then
				tMeles[nMele][i].nTirada=tMeles[nMele][i].nTirada-2;
			end
		end
		
		CalcularPenalizadores();
		if tContadores[nMeleAnt] and tMeles[nMeleAnt] and tContadores[nMeleAnt].nAtaques==#tMeles[nMeleAnt] then ProcesarMele(nMeleAnt); end
		if tContadores[nMele].nAtaques==#tMeles[nMele] then ProcesarMele(nMele); end
	elseif nodoCT and nMele and nMele&gt;0 then
		-- nodoCT no está en una melé
		if not tMeles[nMele] then
			tMeles[nMele]={};
			tContadores[nMele]={nAtaques=0, nAliados=0, nEnemigos=0};
		end
		if DB.getValue(nodoCT..".friendfoe", "")=="foe" then
			table.insert(tMeles[nMele], {PathNodo=nodoCT, nTirada=0, bTirada=false, bEsAliado=false});
			tContadores[nMele].nEnemigos=tContadores[nMele].nEnemigos+1;
			-- Aliados de la nueva melé sufren un penalizador a añadirse un nuevo enemigo
			for i,_ in pairs(tMeles[nMele]) do
				if tMeles[nMele][i].bEsAliado and tMeles[nMele][i].bTirada then
					tMeles[nMele][i].nTirada=tMeles[nMele][i].nTirada-2;
				end
			end
		else
			table.insert(tMeles[nMele], {PathNodo=nodoCT, nTirada=0, bTirada=false, bEsAliado=true});
			tContadores[nMele].nAliados=tContadores[nMele].nAliados+1;
			-- Enemigos de la nueva melé sufren un penalizador a añadirse un nuevo aliado
			for i,_ in pairs(tMeles[nMele]) do
				if not tMeles[nMele][i].bEsAliado and tMeles[nMele][i].bTirada then
					tMeles[nMele][i].nTirada=tMeles[nMele][i].nTirada-2;
				end
			end
		end
		CalcularPenalizadores();
		if tContadores[nMele].nAtaques==#tMeles[nMele] then ProcesarMele(nMele); end
	end
--	MostrarMeles();
end

function EliminarDeMele(nodoCT, nMele)
	local tNodoMele;
	if tMeles[nMele] then
		for i,_ in pairs(tMeles[nMele]) do
			if tMeles[nMele][i].PathNodo==nodoCT then
				tNodoMele=table.remove(tMeles[nMele], i);
				if DB.getValue(nodoCT..".friendfoe", "")=="foe" then
					tContadores[nMele].nEnemigos=tContadores[nMele].nEnemigos-1;
				else
					tContadores[nMele].nAliados=tContadores[nMele].nAliados-1;
				end
				if tNodoMele.bTirada then
					tContadores[nMele].nAtaques=tContadores[nMele].nAtaques-1;
				end
				-- Recalculamos los modificacores aplicados en las tiradas por múltiples enemigos en la melé
				if tNodoMele.bEsAliado then
					-- Enemigos de la melé incrementan su tirada al irse un aliado
					for i,_ in pairs(tMeles[nMele]) do
						if not tMeles[nMele][i].bEsAliado and tMeles[nMele][i].bTirada then
							tMeles[nMele][i].nTirada=tMeles[nMele][i].nTirada+2;
						end
					end
				else
					-- Aliados de la melé incrementan su tirada al irse un enemigo
					for i,_ in pairs(tMeles[nMele]) do
						if tMeles[nMele][i].bEsAliado and tMeles[nMele][i].bTirada then
							tMeles[nMele][i].nTirada=tMeles[nMele][i].nTirada+2;
						end
					end
				end
				CalcularPenalizadores();
				if tContadores[nMele].nAtaques==#tMeles[nMele] then ProcesarMele(nMele); end			
				break;
			end
		end
	end
--	MostrarMeles();
	return tNodoMele;
end

function AniadirAtaqueAMele(nodoCT, nMele, nTotal)
	if tMeles and tMeles[nMele] then
		for i,_ in pairs(tMeles[nMele]) do
			if tMeles[nMele][i].PathNodo==nodoCT then
				tMeles[nMele][i].nTirada=nTotal;
				if not tMeles[nMele][i].bTirada then
					tContadores[nMele].nAtaques=tContadores[nMele].nAtaques+1;
					tMeles[nMele][i].bTirada=true;
				end
				break;
			end
		end
	end
--	MostrarMeles();
	if tContadores[nMele].nAtaques==#tMeles[nMele] then ProcesarMele(nMele); end
end

function ProcesarMele(nMele)
	local tAliados={}
	local tEnemigos={}
	for i,_ in pairs(tMeles[nMele]) do
		if tMeles[nMele][i].bEsAliado then table.insert(tAliados,tMeles[nMele][i]);
		else table.insert(tEnemigos,tMeles[nMele][i]);
		end
	end
	local sNombreEnemigo="";
	local nResultado=0;
	local rMessage = ChatManager.createBaseMessage();
	if #tAliados&gt;0 and #tEnemigos&gt;0 then
		if #tAliados==1 or #tEnemigos==1 then
			for i=1,#tAliados do
				for j=1,#tEnemigos do
					if DB.getValue(tEnemigos[j].PathNodo..".isidentified", 0)==1 then sNombreEnemigo=DB.getValue(tEnemigos[j].PathNodo..".name", "");
					else sNombreEnemigo=DB.getValue(tEnemigos[j].PathNodo..".nonid_name", "");
					end
					nResultado=tAliados[i].nTirada-tEnemigos[j].nTirada;
					if nResultado&gt;0 then
						--Debug.chat(DB.getValue(tAliados[i].PathNodo..".name", "").." golpea a "..sNombreEnemigo.." con "..nResultado.." éxitos");
						AniadirResultadoAtaque(tAliados[i].PathNodo, tEnemigos[j].PathNodo, nResultado);
						rMessage.text = DB.getValue(tAliados[i].PathNodo..".name", "").." golpea a "..sNombreEnemigo.." con "..nResultado.." éxitos";
						if nResultado&gt;=10 then
							rMessage.icon = "roll_attack_crit";
						else
							rMessage.icon = "roll_attack_hit";
						end
					elseif nResultado&lt;0 then
						--Debug.chat(sNombreEnemigo.." golpea a "..DB.getValue(tAliados[i].PathNodo..".name", "").." con "..(-1*nResultado).." éxitos");
						AniadirResultadoAtaque(tEnemigos[j].PathNodo, tAliados[i].PathNodo, -1*nResultado);
						rMessage.text = sNombreEnemigo.." golpea a "..DB.getValue(tAliados[i].PathNodo..".name", "").." con "..(-1*nResultado).." éxitos";
						if nResultado&lt;=-10 then
							rMessage.icon = "roll_attack_crit";
						else
							rMessage.icon = "roll_attack_hit";
						end
					else
						--Debug.chat(DB.getValue(tAliados[i].PathNodo..".name", "").." empata con "..sNombreEnemigo);
						rMessage.text = DB.getValue(tAliados[i].PathNodo..".name", "").." empata con "..sNombreEnemigo;
						rMessage.icon = "roll_attack_miss";
					end
					Comm.deliverChatMessage(rMessage);
				end
			end
			for i=1,#tAliados do
				for j=1,#tEnemigos do
--					DB.setValue(tEnemigos[j].PathNodo..".SelectorMele", "string", "No");
					DB.setValue(tEnemigos[j].PathNodo..".PenMeleMultiEnemigos", "number", 0);
				end
--				DB.setValue(tAliados[i].PathNodo..".SelectorMele", "string", "No");
				DB.setValue(tAliados[i].PathNodo..".PenMeleMultiEnemigos", "number", 0);
			end
			table.remove(tMeles, nMele);
			table.remove(tContadores, nMele);
			MostrarResultadosAtaques();
		else
			Debug.chat("No puede haber más de un individuo en ambos bandos de una melé");
		end
	end
end

function MostrarResultadosAtaques()
	for NotoCTAtacante,_ in pairs(tResultados) do
		for NodoCTDefensor,_ in pairs(tResultados[NotoCTAtacante]) do
			Debug.chat(DB.getValue(NotoCTAtacante..".name", ""), DB.getValue(NodoCTDefensor..".name", ""), tResultados[NotoCTAtacante][NodoCTDefensor])
		end
	end
end

function AniadirResultadoAtaque(NotoCTAtacante, NodoCTDefensor, nExitos)
	if not tResultados[NotoCTAtacante] then tResultados[NotoCTAtacante]={} end;
	tResultados[NotoCTAtacante][NodoCTDefensor]=nExitos;
--	MostrarResultadosAtaques();
end

function LimpiarMeles()
	tMeles={}
	tContadores={}
	tResultados={}
	for _,nodoCT in pairs(DB.getChildren("combattracker.list")) do
		DB.setValue(nodoCT, "SelectorMele", "string", "No");
		DB.setValue(nodoCT, "SelectorMele3", "string", "No");
	end
--	MostrarMeles();
end

function PreDanio(rSource, aTargeting, rRolls)
	local iRoll = 0;
	if aTargeting and rSource then
		for _,vTargetGroup in ipairs(aTargeting) do
			for _,vTarget in ipairs(vTargetGroup) do
				iRoll = iRoll + 1;
				if tResultados[rSource.sCTNode] and tResultados[rSource.sCTNode][vTarget.sCTNode] and tResultados[rSource.sCTNode][vTarget.sCTNode]&gt;0 then
					rRolls[iRoll] = {nBonuses = rRolls[iRoll].nBonuses,
									aDice = rRolls[iRoll].aDice,
									nMod = rRolls[iRoll].nMod+math.min(tResultados[rSource.sCTNode][vTarget.sCTNode], 10),
									sType = rRolls[iRoll].sType,
									sDesc = rRolls[iRoll].sDesc.." [Éxitos ataque: "..tResultados[rSource.sCTNode][vTarget.sCTNode].." ]"
					};
					tResultados[rSource.sCTNode][vTarget.sCTNode]=0;
				end
			end
		end
	end
	return aTargeting;
end

function Danio(rSource, rTarget, rRoll)
--	local rMessage;
	if rSource then
		local rMessage1 = ActionsManager.createActionMessage(rSource, rRoll);
		rMessage1.type="DanioRollAction";
		Comm.deliverChatMessage(rMessage1);
	end

	if rTarget then
		local rMessage2 = ChatManager.createBaseMessage();
		rMessage2.text = "Daño ["..ActionsManager.total(rRoll).."] -&gt; [a "..DB.getValue(rTarget.sCTNode..".name", "").."]";
		rMessage2.icon = "roll_damage";
		Comm.deliverChatMessage(rMessage2);
	end
end</Script>
    <RegisterScript>true</RegisterScript>
    <Encoding>UTF-8</Encoding>
  </Scripts>
</DocumentElement>