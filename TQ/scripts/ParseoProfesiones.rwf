<DocumentElement xmlns="http://tempuri.org/Ruleset.xsd">
  <Scripts>
    <ScriptName>ParseoProfesiones</ScriptName>
    <FolderID>21</FolderID>
    <Script>StringToNum={
	["un"]=1,
	["uno"]=1,
	["una"]=1,
	["dos"]=2,
	["tres"]=3,
	["cuatro"]=4,
	["cinco"]=5,
	["seis"]=6,
	["siete"]=7,
	["ocho"]=8,
	["nueve"]=9,
	["diez"]=10,
}

Profesiones={
	["artesano"] = {permitida=true, restriccion=""},
	["artista"] = {permitida=true, restriccion=""},
	["asesino"] = {permitida=true, restriccion=""},
	["bandido"] = {permitida=true, restriccion=""},
	["campesino"] = {permitida=true, restriccion=""},
	["cazador"] = {permitida=true, restriccion=""},
	["criado"] = {permitida=true, restriccion=""},
	["chamán"] = {permitida=true, restriccion=""},
	["espía"] = {permitida=true, restriccion=""},
	["hechicero"] = {permitida=true, restriccion=""},
	["hechicero guerrero"] = {permitida=true, restriccion=""},
	["ladrón"] = {permitida=true, restriccion=""},
	["mensajero"] = {permitida=true, restriccion=""},
	["marinero"] = {permitida=true, restriccion=""},
	["mendigo"] = {permitida=true, restriccion=""},
	["mercader"] = {permitida=true, restriccion=""},
	["minero"] = {permitida=true, restriccion=""},
	["noble cortesano"] = {permitida=true, restriccion=""},
	["noble guerrero"] = {permitida=true, restriccion=""},
	["nómada"] = {permitida=true, restriccion=""},
	["pirata"] = {permitida=true, restriccion=""},
	["sabio"] = {permitida=true, restriccion=""},
	["sacerdote"] = {permitida=true, restriccion=""},
	["sacerdote guerrero"] = {permitida=true, restriccion=""},
	["soldado"] = {permitida=true, restriccion=""},
}

numIdiomasProfesion=0;
numArmasProfesion=0;
numArtesaniasProfesion=0;

function ObtenerListaProfesiones(sProfesiones, bPermitir)
	local aClauses={};
	if sProfesiones then aClauses,_ = StringManager.split(sProfesiones:lower(), ",y", true); end;
	for sProf,_ in pairs(Profesiones) do
		Profesiones[sProf].permitida=not bPermitir;
		Profesiones[sProf].restriccion="";
	end
	for i=1,#aClauses do
		if aClauses[i]:match(".*%s*%(.*%)") then aClauses[i]=aClauses[i]:match("(.*)%s*%(.*%)"); end -- Para quitar los comentarios entre paréntesis
		if string.sub(aClauses[i], aClauses[i]:len(), aClauses[i]:len())==" " then aClauses[i]=string.match(aClauses[i], "([%a%s:ñÑáÁéÉíÍóÓúÚ]+)[%s*]"); end
		Profesiones[aClauses[i]].permitida=bPermitir;
	end
end

function ObtenerProfesionesPermitidas(sProfesiones)
	local aClauses;
	sProfesiones=sProfesiones:gsub("\n", " ");
	sProfesiones=sProfesiones:gsub("  ", " ");
	
	aClauses,_=StringManager.split(sProfesiones, "%.", true); -- Obtenemos la lista de profesiones (aClauses[1]) y las excepciones (aClauses[2])
	if aClauses and #aClauses&gt;0 then sProfesiones=aClauses[1]; end
		
	if sProfesiones:match("Todas menos") then
		ObtenerListaProfesiones(sProfesiones:match("Todas menos (.*)"), false)
	elseif sProfesiones=="" or sProfesiones:match("Todas") then
		ObtenerListaProfesiones("", false);
	else
		ObtenerListaProfesiones(sProfesiones:match("(.*)"), true);
	end
	
	if aClauses[2] then
		local sProfesionesConExcepciones, sExcepciones=aClauses[2]:match("Puede ser (.*) si escoge la (.*)");
		sProfesionesConExcepciones=sProfesionesConExcepciones:gsub(" o ", ", ");
		aClauses,_=StringManager.split(sProfesionesConExcepciones, ",", true);
		--Debug.chat(aClauses)
		for i=1,#aClauses do
			if string.sub(aClauses[i], aClauses[i]:len(), aClauses[i]:len())==" " then aClauses[i]=string.match(aClauses[i], "([%a%s:ñÑáÁéÉíÍóÓúÚ]+)[%s*]"); end
			if Profesiones[aClauses[i]] then Profesiones[aClauses[i]].restriccion=sExcepciones; end
		end
	end
end;

function ProfesionPermitida(sProfesion)
	return sProfesion and ParseoProfesiones.Profesiones[sProfesion:lower()] and ParseoProfesiones.Profesiones[sProfesion:lower()].permitida
end

function esSecundaria(sHabilidad)
	sHabilidad=string.lower(sHabilidad);
	if string.match(sHabilidad, "arma cc")==nil and string.match(sHabilidad,"arma pr")==nil and string.match(sHabilidad,"artesanía")==nil and string.match(sHabilidad,"idioma")==nil then
		return false;
	else
		return true;
	end
end

function ResetearHabilidadesProfesion()
	numIdiomasProfesion=0;
	numArmasProfesion=0;
	numArtesaniasProfesion=0;
	local rHabilidad; local rSecundaria;
	for _,rHabilidad in pairs(ParseoHabilidades.DatosHabilidades) do
		rHabilidad.prof=0;
	end
	for _,rHabilidad in pairs(ParseoHabilidades.DatosHabilidadesSecundarias) do
		for _,rSecundaria in pairs(rHabilidad) do
			rSecundaria.prof=0;
		end
	end
end

function ObtenerHabilidadesDeProfesion(sHabilidades)
	--Debug.chat(ParsearHabilidades(sHabilidades));
	ResetearHabilidadesProfesion();
	local aHabilidades = {}; local sClave;
	local bEsMultiple=false; local sSingular=""; local sPlural="";
	sHabilidades=sHabilidades:gsub("\n", " ");
	sHabilidades=sHabilidades:gsub("  ", " ");
	local aClauses,_ = StringManager.split(sHabilidades, ",;\.\r\n", true);
	
	for i = 1, #aClauses do
		if string.sub(aClauses[i], aClauses[i]:len(), aClauses[i]:len())==" " then aClauses[i]=string.match(aClauses[i], "([%a%s:ñÑáÁéÉíÍóÓúÚ]+)[%s*]"); end
		if aClauses[i] and aClauses[i]~="" then
			sClave=ParseoHabilidades.Habilidad2Clave[aClauses[i]:lower()];
			bEsMultiple, sSingular, sPlural=ParseoHabilidades.esMultiple(aClauses[i])
			if sClave and sClave~="" and ParseoHabilidades.DatosHabilidades[sClave] then
--				Debug.chat("Habilidad simple", sClave);
				ParseoHabilidades.DatosHabilidades[sClave].prof=1;
			else
				local sPrimaria, sSecundaria=aClauses[i]:match("(.*):[%s*](.*)");
				if sPrimaria then sClave=ParseoHabilidades.Habilidad2Clave[sPrimaria:lower()]; else sClave=""; end
				if sClave=="Idioma" and (sSecundaria=="Mezuri" or sSecundaria=="Austero") then sSecundaria="Mezuri o Austero" end
				if sClave=="Idioma" and (sSecundaria=="Oriental" or sSecundaria=="Kunya") then sSecundaria="Oriental o Kunya" end
				if sClave=="Artesania" and (sSecundaria=="Escultura" or sSecundaria=="Talla") then sSecundaria="Escultura/Talla" end
				if sClave=="Artesania" and (sSecundaria=="Pintura" or sSecundaria=="Dibujo") then sSecundaria="Pintura/Dibujo" end

				if sClave and sSecundaria and ParseoHabilidades.DatosHabilidadesSecundarias[sClave] and ParseoHabilidades.DatosHabilidadesSecundarias[sClave][sSecundaria] then
--					Debug.chat("Habilidad secundaria", sClave, sSecundaria);
					ParseoHabilidades.DatosHabilidadesSecundarias[sClave][sSecundaria].prof=1;
				elseif sPrimaria and sSecundaria and bEsMultiple then 
--					Debug.chat("Habilidad múltiple", sPrimaria, sSecundaria);
					sPrimaria=sPrimaria:gsub(sPlural, sSingular);
					sClave=ParseoHabilidades.Habilidad2Clave[sSingular:lower()];
					ParseoHabilidades.DatosHabilidadesSecundarias[sClave][sSecundaria].prof=1;
					local j=i+1;
					while j&lt;=#aClauses and ParseoHabilidades.DatosHabilidadesSecundarias[sClave][aClauses[j]] do
						aClauses[j]=sSingular..": "..aClauses[j];
--						Debug.chat("\t\tHabilidad múltiple sin primaria", aClauses[j]);
						j=j+1;
					end
				else
					if aClauses[i]:lower()=="idioma propio" then
						ParseoHabilidades.DatosHabilidades["Idioma Nativo"].prof=1;
--						Debug.chat("Idioma propio", aClauses[i]);
					elseif aClauses[i]:lower():match("de armas") then
						local sNumArmas=aClauses[i]:lower():match("(.-) habilidad");
						numArmasProfesion=StringToNum[sNumArmas];
--						Debug.chat("armas de profesión", aClauses[i], sNumArmas);
					elseif aClauses[i]:lower()=="otro idioma" then
						numIdiomasProfesion=1;
						numIdiomasProfesion=StringToNum[snumIdiomas];
--						Debug.chat("otro idioma", aClauses[i], numIdiomasProfesion);
					elseif aClauses[i]:lower():match("otros .- idiomas") then
						local snumIdiomas=aClauses[i]:lower():match("otros (.-) idiomas");
						numIdiomasProfesion=StringToNum[snumIdiomas];
--						Debug.chat("otros X idiomas", aClauses[i], snumIdiomas);
					elseif aClauses[i]:lower():match("idioma %(.- a elegir%)") then
						local snumIdiomas=aClauses[i]:lower():match("idioma %((.-) a elegir%)");
						numIdiomasProfesion=StringToNum[snumIdiomas];
--						Debug.chat("otros X idiomas", aClauses[i], snumIdiomas);
					elseif aClauses[i]:lower():match("(.-) artesanía") then
						local snumArtesanias=aClauses[i]:lower():match("(.-) artesanía");
						numArtesaniasProfesion=StringToNum[snumArtesanias];
--						Debug.chat("Artesanías", aClauses[i], numArtesaniasProfesion);
					else
						Debug.chat("Otro tipo de habilidad", aClauses[i]);
					end
				end
			end
			--table.insert(aHabilidades, {sHabilidad=sHabilidad, nValor=tonumber(sValor)});
		end
	end
end</Script>
    <RegisterScript>true</RegisterScript>
    <Encoding />
  </Scripts>
</DocumentElement>