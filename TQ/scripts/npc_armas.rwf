<DocumentElement xmlns="http://tempuri.org/Ruleset.xsd">
  <Scripts>
    <ScriptName>npc_armas</ScriptName>
    <FolderID>29</FolderID>
    <Script>-- 
-- Please see the license.html file included with this distribution for 
-- attribution and copyright information.
--

local bParsed = false;
local aComponents = {};

-- The nDragMod and sDragLabel fields keep track of the entry under the cursor
local sDragLabel = nil;
local nDragMod = nil;
local bDragging = false;
local sDado="1d10";
local bEsDanio=false;
local bEsEfecto=false;
local bEsAtaque=false;

function getCompletion(s)
	-- Find a matching completion for the given string
	for k,_ in pairs(DataCommon.skilldata) do
		if string.lower(s) == string.lower(string.sub(k, 1, #s)) then
			return string.sub(k, #s + 1);
		end
	end

	return "";
end

local nCaracteresDobles=0;

function ObtenerCampos(startpos, aPartes, aPartesStats)
	-- Formatos de ataque posibles (en orden de procesado):
	-- Mordisco 15. Daño 3+4. Puede agarrar. --&gt; Arma Bono. Daño Fijo[+/-Mod]. Efecto.
	-- Mordisco 15. Daño 3. Puede agarrar. --&gt; Arma Bono. Daño Fijo. Efecto.
	-- Garra 15. Daño 2+4. --&gt; Arma Bono. Daño Fijo[+/-Mod].
	-- Garra 15. Daño 2. --&gt; Arma Bono. Daño Fijo.
	-- Salto y derribo 15. Daño: arroja al suelo y da ventaja. --&gt; Arma Bono. Daño: Efecto.
	-- Salto y derribo 15. Daño: especial. --&gt; Arma Bono. Daño: especial.
	
	local nAtaqueInicio=0;
	local nAtaqueFin=0;
	local nDanioInicio=0;
	local nDanioFin=0;
	local nEfectoInicio=0;
	local nEfectoFin=0;
	local sArma="";
	local sAtaque="";
	local nAtaque=0
	local sDanio="";
	local nDanio=0;
	local sModDanio="";
	local sEfecto="";
	local nAllowRoll = 0;
	local nMod = 0;
	
	-- Obtenemos el arma y el ataque
	sArma, sAtaque = string.match(aPartes[1], "([%a%sñÑáÁéÉíÍóÓúÚ]+)%s*([%+%-–]?%d*)")
	if sArma and sArma~="" and sAtaque and sAtaque~="" then
		nAtaqueInicio=startpos+aPartesStats[1].startpos-1-nCaracteresDobles;
		nAtaqueFin=startpos+aPartesStats[1].endpos-nCaracteresDobles;
		local _,count = string.gsub(aPartes[1], "[ñÑáÁéÉíÍóÓúÚ]", "");
		nCaracteresDobles=nCaracteresDobles+count/2;
		-- Obtenemos el daño en formato "daño x+mod"
		sDanio, sModDanio=string.match(aPartes[2], "Daño%s*([%+%-–]?%d*)([%+%-–]?%d*)");
		if sDanio and sModDanio and sDanio~="" and sModDanio~="" and sModDanio~="\r\n" then
			nDanioInicio=startpos+aPartesStats[2].startpos-1-nCaracteresDobles;
			nDanioFin=startpos+aPartesStats[2].endpos-nCaracteresDobles;
			nCaracteresDobles=nCaracteresDobles+1;
			
		else
			-- Obtenemos el daño en formato "daño x"
			sDanio=string.match(aPartes[2], "Daño%s*(%d*)");
			if sDanio and sDanio~="" and sDanio~="\r\n" then
				nDanioInicio=startpos+aPartesStats[2].startpos-1-nCaracteresDobles;
				nDanioFin=startpos+aPartesStats[2].endpos-nCaracteresDobles;
				nCaracteresDobles=nCaracteresDobles+1;
			else
				-- Obtenemos el daño en formato "daño: efecto"
				nEfectoInicio=startpos+aPartesStats[2].startpos-1-nCaracteresDobles;
				nEfectoFin=startpos+aPartesStats[2].endpos-nCaracteresDobles;
				sEfecto=string.match(aPartes[2], "Daño:%s*([%w%sñÑáÁéÉíÍóÓúÚ]+)");
				--Debug.chat(sEfecto, sDanio);
				local _,count = string.gsub(aPartes[2], "[ñÑáÁéÉíÍóÓúÚ]", "");
				nCaracteresDobles=nCaracteresDobles+count/2;
			end
		end
		if #aPartes==3 then
			-- Obtenemos el efecto del tercer campo
--			sEfecto=aPartes[3];
--			nEfectoInicio=startpos+aPartesStats[3].startpos-1-nCaracteresDobles;
--			nEfectoFin=startpos+aPartesStats[3].endpos-nCaracteresDobles;
			local _,count = string.gsub(aPartes[3], "[ñÑáÁéÉíÍóÓúÚ]", "");
			nCaracteresDobles=nCaracteresDobles+count/2;
		end
--		Debug.chat(sArma, nAtaqueInicio, nAtaqueFin, nArmaFin);
--		Debug.chat(sDanio, sModDanio, nDanioInicio, nDanioFin);
--		Debug.chat(sEfecto, nEfectoInicio, nEfectoFin);
--
		if sAtaque and sAtaque ~= "" then
			nAllowRoll = 1;
			nAtaque = tonumber(sAtaque) or 0;
		end
		table.insert(aComponents, {nStart = nAtaqueInicio, nLabelEnd = nAtaqueInicio + nAtaqueFin - startpos, nEnd = nAtaqueFin, sLabel = sArma, nMod = nAtaque, nAllowRoll = nAllowRoll, sEfecto="" });

		if sDanio and sDanio ~= "" then
			nAllowRoll = 2;
			nDanio = tonumber(sDanio) or 0;
			if sModDanio and sModDanio~="" and sModDanio~="\r\n" then
				nDanio = nDanio + (tonumber(sModDanio) or 0);
			end
			table.insert(aComponents, {nStart = nDanioInicio, nLabelEnd = nDanioInicio + nDanioFin - startpos, nEnd = nDanioFin, sLabel = sArma, nMod = nDanio, nAllowRoll = nAllowRoll , sEfecto=sEfecto});
		elseif sEfecto and sEfecto~="" and sEfecto~= "\r\n" and string.lower(sEfecto)~= "especial" then
			nAllowRoll = 3;
			table.insert(aComponents, {nStart = nEfectoInicio, nLabelEnd = nEfectoInicio + nEfectoFin - startpos, nEnd = nEfectoFin, sLabel = sArma, nMod = nDanio, nAllowRoll = nAllowRoll , sEfecto=sEfecto});
		end

--		if #aPartes==3 then
--			nAllowRoll = 3;
--			table.insert(aComponents, {nStart = nEfectoInicio, nLabelEnd = nEfectoInicio + nEfectoFin - startpos, nEnd = nEfectoFin, sLabel = sArma, nMod = 0, nAllowRoll = nAllowRoll, sEfecto=aPartes[3] });
--		end
	end
end

function onValueChanged()
	
	-- Parse the value string
	parseComponents();

end

function parseComponents()
	aComponents = {};
	
	local aClauses, aClauseStats = StringManager.split(getValue(), "\r\n", true);
	nCaracteresDobles=0;
	
	for i = 1, #aClauses do
		local aPartes, aPartesStats = StringManager.split(aClauses[i], "%.\r\n", true);
		if #aPartes&gt;1 then ObtenerCampos(aClauseStats[i].startpos, aPartes, aPartesStats); end
	end
	
	bParsed = true;
end

-- Reset selection when the cursor leaves the control
function onHover(bOnControl)
	if bDragging or bOnControl then
		return;
	end

	if not bParsed then
		parseComponents();
	end

	sDragLabel = nil;
	nDragMod = nil;
	setSelectionPosition(0);
end

-- Hilight skill hovered on
function onHoverUpdate(x, y)
	if bDragging then
		return;
	end

	if not bParsed then
		parseComponents();
	end
	local nMouseIndex = getIndexAt(x, y);

	for i = 1, #aComponents, 1 do
		if aComponents[i].nAllowRoll == 1 then
			if aComponents[i].nStart &lt;= nMouseIndex and aComponents[i].nEnd &gt; nMouseIndex then
				setCursorPosition(aComponents[i].nStart);
				setSelectionPosition(aComponents[i].nEnd);

				sDragLabel = aComponents[i].sLabel;
				nDragMod = aComponents[i].nMod;
				setHoverCursor("hand");
				
				bEsDanio=false;
				bEsEfecto=false;
				bEsAtaque=true;
				return;
			end
		end
		if aComponents[i].nAllowRoll == 2 then
			if aComponents[i].nStart &lt;= nMouseIndex and aComponents[i].nEnd &gt; nMouseIndex then
				setCursorPosition(aComponents[i].nStart);
				setSelectionPosition(aComponents[i].nEnd);

				sDragLabel = aComponents[i].sLabel;
				nDragMod = aComponents[i].nMod;
				setHoverCursor("hand");
				
				bEsDanio=true;
				bEsEfecto=false;
				bEsAtaque=false;
				return;
			end
		end
		if aComponents[i].nAllowRoll == 3 then
			if aComponents[i].nStart &lt;= nMouseIndex and aComponents[i].nEnd &gt; nMouseIndex then
				setCursorPosition(aComponents[i].nStart);
				setSelectionPosition(aComponents[i].nEnd);

				sDragLabel = aComponents[i].sLabel.." - "..aComponents[i].sEfecto;
				nDragMod = 0;
				setHoverCursor("hand");
				
				bEsDanio=false;
				bEsEfecto=true;
				bEsAtaque=false;
				return;
			end
		end
	end
	
	sDragLabel = nil;
	nDragMod = nil;
	setHoverCursor("arrow");
end


function action(dragInfo)
	local sTipoAccion="";
	if sDragLabel then
		if bEsAtaque then
			DiceRollString = sDado.."!+"..nDragMod;
			DiceRollDescription = "[Ataque] " .. sDragLabel;
			GameSystem.actions["AtaqueRollAction"] = { bUseModStack = "true" }
			sTipoAccion="AtaqueRollAction";
		elseif bEsDanio then
			DiceRollString = ""..nDragMod;
			DiceRollDescription = "[Daño] " .. sDragLabel;
			GameSystem.actions["DanioRollAction"] = { bUseModStack = "true" }
			sTipoAccion="DanioRollAction";
		elseif bEsEfecto then
			DiceRollString = "";
			DiceRollDescription = "[Efecto] " .. sDragLabel;
			GameSystem.actions["EfectoRollAction"] = { bUseModStack = "false" }
			sTipoAccion="EfectoRollAction";
		end
		
		DiceRollAdditionalInfo = {};
		if onBeforeDiceRoll then if onBeforeDiceRoll() == false then return; end; end;
		local windataref = window.getDatabaseNode();
		if windataref == nil then windataref = window; end;
		RulesetWizardDiceRoller.Roll(dragInfo, windataref, sTipoAccion, DiceRollDescription, DiceRollString, getValue(), DiceRollAdditionalInfo);
		ModifierStack.reset();
		if onAfterDiceRoll then onAfterDiceRoll(); end;
		return true;
	end
end

function onDoubleClick(x, y)
	action();
	return true;
end

function onDragStart(button, x, y, draginfo)
	action(draginfo);

	bDragging = true;
	setCursorPosition(0);
	
	return true;
end

function onDragEnd(draginfo)
	bDragging = false;
end

-- Suppress default processing to support dragging
function onClickDown(button, x, y)
	return true;
end

-- On mouse click, set focus, set cursor position and clear selection
function onClickRelease(button, x, y)
	setFocus();
	
	local n = getIndexAt(x, y);
	setSelectionPosition(n);
	setCursorPosition(n);
	
	return true;
end

function performRoll(draginfo, rActor, sSkillName, nSkillMod)
	local rRoll = getRoll(rActor, sSkillName, nSkillMod, sSkillStat, sExtra);
	
	if Session.IsHost and CombatManager.isCTHidden(ActorManager.getCTNode(rActor)) then
		rRoll.bSecret = true;
	end
	
	ActionsManager.performAction(draginfo, rActor, rRoll);
end
--
--function getRoll(rActor, sSkillName, nSkillMod)
--	local rRoll = {};
--	rRoll.sType = "habilidad";
--	rRoll.aDice = { "d10" };
--	rRoll.nMod = nSkillMod or 0;
--	rRoll.sDesc = "[Habilidad] " .. sSkillName;
--
--	return rRoll;
--end
--
--function onRoll(rSource, rTarget, rRoll)
--	local rMessage = ActionsManager.createActionMessage(rSource, rRoll);
--	
--	local nTotal = ActionsManager.total(rRoll);
--	Comm.deliverChatMessage(rMessage);
--end
--
--function onInit()
--	ActionsManager.registerResultHandler("habilidad", onRoll);
--end
function Devilitado(bDebilitado)
	if bDebilitado then sDado="1d6";
	else sDado="1d10";
	end
end</Script>
    <RegisterScript>true</RegisterScript>
    <Encoding />
  </Scripts>
</DocumentElement>